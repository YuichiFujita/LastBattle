//============================================================
//
//	マップ処理 [map.cpp]
//	Author：藤田勇一
//
//============================================================
//************************************************************
//	インクルードファイル
//************************************************************
#include "map.h"
#include "manager.h"
#include "model.h"

//************************************************************
//	定数宣言
//************************************************************
namespace
{
	const char*	MODEL_FILE = "data\\MODEL\\MAP\\arena000.x";	// モデルファイル
	const int	PRIORITY = 0;	// マップの優先順位
}

//************************************************************
//	子クラス [CMap] のメンバ関数
//************************************************************
//============================================================
//	コンストラクタ
//============================================================
CMap::CMap() : CObjectModel(CObject::LABEL_MAP, CObject::DIM_3D, PRIORITY)
{

}

//============================================================
//	デストラクタ
//============================================================
CMap::~CMap()
{

}

//============================================================
//	初期化処理
//============================================================
HRESULT CMap::Init(void)
{
	// オブジェクトモデルの初期化
	if (FAILED(CObjectModel::Init()))
	{ // 初期化に失敗した場合

		// 失敗を返す
		assert(false);
		return E_FAIL;
	}

	// マップモデルを登録・割当
	BindModel(MODEL_FILE);

	// 成功を返す
	return S_OK;
}

//============================================================
//	終了処理
//============================================================
void CMap::Uninit(void)
{
	// オブジェクトモデルの終了
	CObjectModel::Uninit();
}

//============================================================
//	更新処理
//============================================================
void CMap::Update(void)
{
	// オブジェクトモデルの更新
	CObjectModel::Update();
}

//============================================================
//	描画処理
//============================================================
void CMap::Draw(CShader *pShader)
{
	CToonShader	*pToonShader = CToonShader::GetInstance();	// トゥーンシェーダー情報
	if (pToonShader->IsEffectOK())
	{ // エフェクトが使用可能な場合

		// オブジェクトモデルの描画
		CObjectModel::Draw(pToonShader);
	}
	else
	{ // エフェクトが使用不可能な場合

		// エフェクトエラー
		assert(false);

		// オブジェクトモデルの描画
		CObjectModel::Draw(pShader);
	}
}

//============================================================
//	生成処理
//============================================================
CMap *CMap::Create
( // 引数
	const D3DXVECTOR3& rPos,	// 位置
	const D3DXVECTOR3& rRot		// 向き
)
{
	// マップの生成
	CMap *pMap = new CMap;
	if (pMap == nullptr)
	{ // 生成に失敗した場合

		return nullptr;
	}
	else
	{ // 生成に成功した場合

		// マップの初期化
		if (FAILED(pMap->Init()))
		{ // 初期化に失敗した場合

			// マップの破棄
			SAFE_DELETE(pMap);
			return nullptr;
		}

		// 位置を設定
		pMap->SetVec3Position(rPos);

		// 向きを設定
		pMap->SetVec3Rotation(rRot);

		// 確保したアドレスを返す
		return pMap;
	}
}
