//============================================================
//
//	ミニドラゴン処理 [enemyMiniDragon.cpp]
//	Author：藤田勇一
//
//============================================================
//************************************************************
//	インクルードファイル
//************************************************************
#include "enemyMiniDragon.h"
#include "manager.h"
#include "renderer.h"

//************************************************************
//	定数宣言
//************************************************************
namespace
{
	const char *MODEL_FILE[] =	// モデルファイル
	{
		"data\\MODEL\\ENEMY\\mini_dragon000.x",	// ミニドラゴン
	};
}

//************************************************************
//	スタティックアサート
//************************************************************
static_assert(NUM_ARRAY(MODEL_FILE) == CEnemyMiniDragon::MODEL_MAX, "ERROR : Model Count Mismatch");

//************************************************************
//	子クラス [CEnemyMiniDragon] のメンバ関数
//************************************************************
//============================================================
//	コンストラクタ
//============================================================
CEnemyMiniDragon::CEnemyMiniDragon(const EType type) : CEnemySmall(type)
{

}

//============================================================
//	デストラクタ
//============================================================
CEnemyMiniDragon::~CEnemyMiniDragon()
{

}

//============================================================
//	初期化処理
//============================================================
HRESULT CEnemyMiniDragon::Init(void)
{
	// 雑魚敵の初期化
	if (FAILED(CEnemySmall::Init()))
	{ // 初期化に失敗した場合

		// 失敗を返す
		assert(false);
		return E_FAIL;
	}

	// スポーン状態にする
	SetState(STATE_SPAWN);

	// 成功を返す
	return S_OK;
}

//============================================================
//	終了処理
//============================================================
void CEnemyMiniDragon::Uninit(void)
{
	// 雑魚敵の終了
	CEnemySmall::Uninit();
}

//============================================================
//	更新処理
//============================================================
void CEnemyMiniDragon::Update(void)
{
	// 雑魚敵の更新
	CEnemySmall::Update();
}

//============================================================
//	描画処理
//============================================================
void CEnemyMiniDragon::Draw(CShader *pShader)
{
	// 雑魚敵の描画
	CEnemySmall::Draw();
}

//============================================================
//	腰モデルのインデックス取得処理
//============================================================
int CEnemyMiniDragon::GetWaistModelID(void) const
{
	// 腰モデルのインデックスを返す
	return MODEL_HEAD;	// TODO；後に変更
}

//============================================================
//	頭モデルのインデックス取得処理
//============================================================
int CEnemyMiniDragon::GetHeadModelID(void) const
{
	// 頭モデルのインデックスを返す
	return MODEL_HEAD;
}

//============================================================
//	モデルファイル取得処理
//============================================================
const char *CEnemyMiniDragon::GetModelFileName(const int nModel) const
{
	if (nModel > NONE_IDX && nModel < MODEL_MAX)
	{ // 使用できるインデックスの場合

		// 引数のインデックスのモデルを返す
		return MODEL_FILE[nModel];
	}
	else { assert(false); return NONE_STRING; }	// 範囲外
}

//============================================================
//	モーションの更新処理
//============================================================
void CEnemyMiniDragon::UpdateMotion(void)
{
	if (IsDeath()) { return; }	// 死亡している

	switch (GetMotionType())
	{ // モーションごとの処理
	case MOTION_IDOL:	// 待機モーション：ループON
		break;

	default:	// 例外処理
		assert(false);
		break;
	}
}
